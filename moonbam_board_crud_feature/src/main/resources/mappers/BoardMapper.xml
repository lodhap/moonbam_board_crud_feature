<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BoardMapper">
	<select id="getPosts" resultType="PostDTO">
		select * from postdb
	</select>
	
	<select id="getPost" parameterType="string" resultType="PostDTO">
		select * from postdb where postid = #{postId}
	</select>
	
	<select id="getPostPage" parameterType="String" resultType="PostPageDTO">
		select * from postdb join postinfodb using (postid) 
		left outer join (select postId, count(isLike) likenum from likedb where postid=#{postId} group by postid) using (postid)
		 where postid=#{postId}
	</select>
	
	<select id="getIsLike" parameterType="map" resultType="String">
		select islike from likedb where postid=#{postId} and userid=#{userId}
	</select>
	
	<insert id="postPost" parameterType="PostDTO">
	    <selectKey keyProperty="postId" resultType="long" order="BEFORE">
	        SELECT POSTIDSEQ.NEXTVAL AS postId FROM DUAL
	    </selectKey>
	    INSERT INTO postDB (postid, postBoard, userid, contid, postTitle, postDate, postEditDate, postText, nickname, categoryId)
	    VALUES (#{postId}, #{postBoard}, #{userId}, #{contId, jdbcType=NUMERIC}, #{postTitle}, sysdate, null, #{postText}, #{nickname}, #{categoryId, jdbcType=NUMERIC})
	</insert>
	
	<delete id="deletePost" parameterType="String">
		delete from postdb where postId=#{postId}
	</delete>
	
	<select id="getUseridFromPost" parameterType="long" resultType="string">
		select userid from postdb where postid=#{postId}
	</select>
	
	<update id="updatePost" parameterType="PostDTO">
		UPDATE postdb SET
                postBoard = #{postBoard},
                postTitle = #{postTitle},
                postEditDate = SYSDATE,
                postText = #{postText},
                nickname = #{nickname}
               	where postId = #{postId}
	</update>
<!-- 	<update id="mergePost" parameterType="PostDTO">
        MERGE INTO postdb target
        USING (SELECT 1 FROM dual) ON (target.postId = #{postId})
        WHEN MATCHED THEN
            UPDATE SET
                target.postBoard = #{postBoard},
                target.postTitle = #{postTitle},
                target.postEditDate = SYSDATE,
                target.postText = #{postText},
                target.nickname = #{nickname},
        WHEN NOT MATCHED THEN
            INSERT (postId, postBoard, userId, contId, postTitle, postDate, postEditDate, postText, nickname, categoryId)
            VALUES (POSTIDSEQ.NEXTVAL, #{postBoard}, #{userId}, #{contId, jdbcType=NUMERIC}, #{postTitle}, sysdate, null, #{postText}, #{nickname}, #{categoryId, jdbcType=NUMERIC})
    </update> -->
</mapper>
